// <auto-generated />
using System;
using HK_Clinic2.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HK_Clinic2.Migrations
{
    [DbContext(typeof(HKClinicDbContext))]
    [Migration("20201214002050_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("HK_Clinic2.Models.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("BuildingNumber")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("('Jeddah')");

                    b.Property<string>("Country")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("('Saudi Arabia')");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UnitNumber")
                        .HasColumnType("int");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AddressId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("HK_Clinic2.Models.Allergy", b =>
                {
                    b.Property<int>("AllergyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.HasKey("AllergyId");

                    b.ToTable("Allergy");
                });

            modelBuilder.Entity("HK_Clinic2.Models.Appointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("AppointmentDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NurseId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("AppointmentId");

                    b.HasIndex("NurseId");

                    b.HasIndex("PatientId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Appointment");
                });

            modelBuilder.Entity("HK_Clinic2.Models.Class", b =>
                {
                    b.Property<int>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClassNumber")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<int>("Grade")
                        .HasColumnType("int");

                    b.Property<DateTime>("Year")
                        .HasColumnType("date");

                    b.HasKey("ClassId");

                    b.ToTable("Class");
                });

            modelBuilder.Entity("HK_Clinic2.Models.Class_Teacher", b =>
                {
                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.HasIndex("ClassId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Class_Teacher");
                });

            modelBuilder.Entity("HK_Clinic2.Models.Clinic", b =>
                {
                    b.Property<int>("ClinicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ClinicId");

                    b.ToTable("Clinic");
                });

            modelBuilder.Entity("HK_Clinic2.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("EmergencyContactNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("MaritalStatus")
                        .HasColumnType("int");

                    b.HasKey("EmployeeId");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("HK_Clinic2.Models.Equipment", b =>
                {
                    b.Property<int>("InventoryId")
                        .HasColumnType("int");

                    b.Property<string>("Manufacturer")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SerialNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("InventoryId");

                    b.ToTable("Equipment");
                });

            modelBuilder.Entity("HK_Clinic2.Models.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.HasKey("EventId");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("HK_Clinic2.Models.Event_Nurse", b =>
                {
                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.HasKey("EventId", "EmployeeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Event_Nurse");
                });

            modelBuilder.Entity("HK_Clinic2.Models.External_Medical_Report", b =>
                {
                    b.Property<int>("ExternalMedicalReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("AttachmentDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("MedicalReportDate")
                        .HasColumnType("date");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("ScannedFile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ExternalMedicalReportId");

                    b.HasIndex("PatientId");

                    b.ToTable("External_Medical_Report");
                });

            modelBuilder.Entity("HK_Clinic2.Models.FamilyDoctor", b =>
                {
                    b.Property<int>("DoctorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("DoctorId");

                    b.HasIndex("StudentId");

                    b.ToTable("FamilyDoctor");
                });

            modelBuilder.Entity("HK_Clinic2.Models.Inventory", b =>
                {
                    b.Property<int>("InventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("date");

                    b.Property<int>("Limit")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("QuantityInStock")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegistrationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("InventoryId");

                    b.ToTable("Inventory");
                });

            modelBuilder.Entity("HK_Clinic2.Models.Inventory_Equipment", b =>
                {
                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("date");

                    b.Property<int>("Limit")
                        .HasColumnType("int");

                    b.Property<string>("Manufacturer")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("QuantityInStock")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegistrationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("SerialNumber")
                        .HasColumnType("int");

                    b.ToView("Inventory_Equipment");
                });

            modelBuilder.Entity("HK_Clinic2.Models.Inventory_Medicine", b =>
                {
                    b.Property<string>("Barcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dosage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("date");

                    b.Property<int>("Limit")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("QuantityInStock")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegistrationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.ToView("Inventory_Medicine");
                });

            modelBuilder.Entity("HK_Clinic2.Models.Medical_Incident", b =>
                {
                    b.Property<int>("MedicalIncidentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("MedicalIncidentId");

                    b.ToTable("Medical_Incident");
                });

            modelBuilder.Entity("HK_Clinic2.Models.Medical_Incident_Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("MedicalIncidentId")
                        .HasColumnType("int");

                    b.Property<bool>("Answer")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PatientId", "MedicalIncidentId");

                    b.HasIndex("MedicalIncidentId");

                    b.ToTable("Medical_Incident_Patient");
                });

            modelBuilder.Entity("HK_Clinic2.Models.Medicine", b =>
                {
                    b.Property<int>("InventoryId")
                        .HasColumnType("int");

                    b.Property<string>("Barcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dosage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("InventoryId");

                    b.ToTable("Medicine");
                });

            modelBuilder.Entity("HK_Clinic2.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("InventoryId")
                        .HasColumnType("int");

                    b.Property<int>("Medium")
                        .HasColumnType("int");

                    b.Property<DateTime>("NotificationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Receiver")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.HasKey("NotificationId");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("InventoryId");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("HK_Clinic2.Models.Notification_Nurse", b =>
                {
                    b.Property<int>("NotificationId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.HasKey("NotificationId", "EmployeeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Notification_Nurse");
                });

            modelBuilder.Entity("HK_Clinic2.Models.Notification_Parent", b =>
                {
                    b.Property<int>("NotificationId")
                        .HasColumnType("int");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("NotificationId", "ParentId");

                    b.HasIndex("ParentId");

                    b.ToTable("Notification_Parent");
                });

            modelBuilder.Entity("HK_Clinic2.Models.Nurse", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("ClinicId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("EmployeeId")
                        .HasName("PK_Nurse_1");

                    b.HasIndex("ClinicId");

                    b.HasIndex("UserId");

                    b.ToTable("Nurse");
                });

            modelBuilder.Entity("HK_Clinic2.Models.Parent", b =>
                {
                    b.Property<int>("ParentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Guardian")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("Relationship")
                        .HasColumnType("int");

                    b.HasKey("ParentId");

                    b.ToTable("Parent");
                });

            modelBuilder.Entity("HK_Clinic2.Models.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<int>("BloodType")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<int?>("Language")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LevelOfRisk")
                        .HasColumnType("int");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("NationalId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("PatientId");

                    b.HasIndex("AddressId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("StudentId");

                    b.ToTable("Patient");
                });

            modelBuilder.Entity("HK_Clinic2.Models.Patient_Allergy", b =>
                {
                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("AllergyId")
                        .HasColumnType("int");

                    b.HasKey("PatientId", "AllergyId");

                    b.HasIndex("AllergyId");

                    b.ToTable("Patient_Allergy");
                });

            modelBuilder.Entity("HK_Clinic2.Models.Prescription", b =>
                {
                    b.Property<int>("PrescriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("InventoryId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("TreatmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.HasKey("PrescriptionId");

                    b.HasIndex("InventoryId");

                    b.HasIndex("PatientId");

                    b.HasIndex("TreatmentId");

                    b.ToTable("Prescription");
                });

            modelBuilder.Entity("HK_Clinic2.Models.Sick_Leave", b =>
                {
                    b.Property<int>("SickLeaveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.Property<int>("VisitId")
                        .HasColumnType("int");

                    b.HasKey("SickLeaveId");

                    b.HasIndex("VisitId");

                    b.ToTable("Sick_Leave");
                });

            modelBuilder.Entity("HK_Clinic2.Models.Staff", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.HasKey("EmployeeId");

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("HK_Clinic2.Models.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int?>("ClassId")
                        .HasColumnType("int");

                    b.Property<int>("EducationLevel")
                        .HasColumnType("int");

                    b.HasKey("StudentId");

                    b.HasIndex("ClassId");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("HK_Clinic2.Models.Student_Appointment", b =>
                {
                    b.Property<DateTime>("AppointmentDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("BloodType")
                        .HasColumnType("int");

                    b.Property<int>("ClassNumber")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LevelOfRisk")
                        .HasColumnType("int");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.ToView("Student Appointment");
                });

            modelBuilder.Entity("HK_Clinic2.Models.Student_Info", b =>
                {
                    b.Property<int>("BloodType")
                        .HasColumnType("int");

                    b.Property<int>("ClassNumber")
                        .HasColumnType("int");

                    b.Property<int>("EducationLevel")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstGuardianMobile")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LevelOfRisk")
                        .HasColumnType("int");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.ToView("Student_Info");
                });

            modelBuilder.Entity("HK_Clinic2.Models.Student_Parent", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.HasKey("StudentId", "ParentId");

                    b.HasIndex("AddressId");

                    b.HasIndex("ParentId");

                    b.ToTable("Student_Parent");
                });

            modelBuilder.Entity("HK_Clinic2.Models.Teacher", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("EmployeeId");

                    b.HasIndex("UserId");

                    b.ToTable("Teacher");
                });

            modelBuilder.Entity("HK_Clinic2.Models.Treatment", b =>
                {
                    b.Property<int>("TreatmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TreatmentId");

                    b.ToTable("Treatment");
                });

            modelBuilder.Entity("HK_Clinic2.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("UserId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("HK_Clinic2.Models.Visit", b =>
                {
                    b.Property<int>("VisitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<string>("Assessment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("InventoryId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NotificationId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TreatmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("VisitDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("VisitId");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("InventoryId");

                    b.HasIndex("NotificationId");

                    b.HasIndex("PatientId");

                    b.HasIndex("TreatmentId");

                    b.ToTable("Visit");
                });

            modelBuilder.Entity("HK_Clinic2.Models.Visit_Treatment", b =>
                {
                    b.Property<string>("Assessment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TreatmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("VisitDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("VisitId")
                        .HasColumnType("int");

                    b.ToView("Visit_Treatment");
                });

            modelBuilder.Entity("HK_Clinic2.Models.Vital", b =>
                {
                    b.Property<int>("VitalsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("BloodPressure")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("BloodSugar")
                        .HasColumnType("int");

                    b.Property<int?>("HeartRate")
                        .HasColumnType("int");

                    b.Property<int?>("Height")
                        .HasColumnType("int");

                    b.Property<int?>("RespiratoryRate")
                        .HasColumnType("int");

                    b.Property<int?>("Temperature")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((37))");

                    b.Property<int>("VisitId")
                        .HasColumnType("int");

                    b.Property<int?>("Weight")
                        .HasColumnType("int");

                    b.HasKey("VitalsId");

                    b.HasIndex("VisitId");

                    b.ToTable("Vital");
                });

            modelBuilder.Entity("HK_Clinic2.Models.Appointment", b =>
                {
                    b.HasOne("HK_Clinic2.Models.Nurse", "Nurse")
                        .WithMany("Appointments")
                        .HasForeignKey("NurseId")
                        .HasConstraintName("FK_Appointment_Nurse")
                        .IsRequired();

                    b.HasOne("HK_Clinic2.Models.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HK_Clinic2.Models.Teacher", "Teacher")
                        .WithMany("Appointments")
                        .HasForeignKey("TeacherId")
                        .HasConstraintName("FK_Appointment_Teacher")
                        .IsRequired();

                    b.Navigation("Nurse");

                    b.Navigation("Patient");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("HK_Clinic2.Models.Class_Teacher", b =>
                {
                    b.HasOne("HK_Clinic2.Models.Class", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .HasConstraintName("FK__Class_Tea__Class__44CA3770")
                        .IsRequired();

                    b.HasOne("HK_Clinic2.Models.Teacher", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK__Class_Tea__Emplo__45BE5BA9")
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("HK_Clinic2.Models.Equipment", b =>
                {
                    b.HasOne("HK_Clinic2.Models.Inventory", "Inventory")
                        .WithOne("Equipment")
                        .HasForeignKey("HK_Clinic2.Models.Equipment", "InventoryId")
                        .HasConstraintName("FK_Equipment_Inventory")
                        .IsRequired();

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("HK_Clinic2.Models.Event_Nurse", b =>
                {
                    b.HasOne("HK_Clinic2.Models.Nurse", "Employee")
                        .WithMany("Event_Nurses")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_Event_Nurse_Nurse")
                        .IsRequired();

                    b.HasOne("HK_Clinic2.Models.Event", "Event")
                        .WithMany("Event_Nurses")
                        .HasForeignKey("EventId")
                        .HasConstraintName("FK_Event_Nurse_Event")
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("HK_Clinic2.Models.External_Medical_Report", b =>
                {
                    b.HasOne("HK_Clinic2.Models.Patient", "Patient")
                        .WithMany("External_Medical_Reports")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_External_Medical_Report_Patient")
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HK_Clinic2.Models.FamilyDoctor", b =>
                {
                    b.HasOne("HK_Clinic2.Models.Student", "Student")
                        .WithMany("FamilyDoctors")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_FamilyDoctor_Student")
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("HK_Clinic2.Models.Medical_Incident_Patient", b =>
                {
                    b.HasOne("HK_Clinic2.Models.Medical_Incident", "MedicalIncident")
                        .WithMany("Medical_Incident_Patients")
                        .HasForeignKey("MedicalIncidentId")
                        .HasConstraintName("FK_Medical_Incident_Patient_Medical_Incident")
                        .IsRequired();

                    b.HasOne("HK_Clinic2.Models.Patient", "Patient")
                        .WithMany("Medical_Incident_Patients")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_Medical_Incident_Patient_Patient")
                        .IsRequired();

                    b.Navigation("MedicalIncident");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HK_Clinic2.Models.Medicine", b =>
                {
                    b.HasOne("HK_Clinic2.Models.Inventory", "Inventory")
                        .WithOne("Medicine")
                        .HasForeignKey("HK_Clinic2.Models.Medicine", "InventoryId")
                        .HasConstraintName("FK_Medicine_Inventory")
                        .IsRequired();

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("HK_Clinic2.Models.Notification", b =>
                {
                    b.HasOne("HK_Clinic2.Models.Appointment", "Appointment")
                        .WithMany("Notifications")
                        .HasForeignKey("AppointmentId")
                        .HasConstraintName("FK_Notification_Appointment");

                    b.HasOne("HK_Clinic2.Models.Inventory", "Inventory")
                        .WithMany("Notifications")
                        .HasForeignKey("InventoryId")
                        .HasConstraintName("FK_Notification_Inventory");

                    b.Navigation("Appointment");

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("HK_Clinic2.Models.Notification_Nurse", b =>
                {
                    b.HasOne("HK_Clinic2.Models.Nurse", "Employee")
                        .WithMany("Notification_Nurses")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_Notification_Nurse_Nurse")
                        .IsRequired();

                    b.HasOne("HK_Clinic2.Models.Notification", "Notification")
                        .WithMany("Notification_Nurses")
                        .HasForeignKey("NotificationId")
                        .HasConstraintName("FK_Notification_Nurse_Notification")
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Notification");
                });

            modelBuilder.Entity("HK_Clinic2.Models.Notification_Parent", b =>
                {
                    b.HasOne("HK_Clinic2.Models.Notification", "Notification")
                        .WithMany("Notification_Parents")
                        .HasForeignKey("NotificationId")
                        .HasConstraintName("FK_Notification_Parent_Notification")
                        .IsRequired();

                    b.HasOne("HK_Clinic2.Models.Parent", "Parent")
                        .WithMany("Notification_Parents")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_Notification_Parent_Parent")
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("HK_Clinic2.Models.Nurse", b =>
                {
                    b.HasOne("HK_Clinic2.Models.Clinic", "Clinic")
                        .WithMany("Nurses")
                        .HasForeignKey("ClinicId")
                        .HasConstraintName("FK_Nurse_Clinic")
                        .IsRequired();

                    b.HasOne("HK_Clinic2.Models.Employee", "Employee")
                        .WithOne("Nurse")
                        .HasForeignKey("HK_Clinic2.Models.Nurse", "EmployeeId")
                        .HasConstraintName("FK_Nurse_Employee")
                        .IsRequired();

                    b.HasOne("HK_Clinic2.Models.User", "User")
                        .WithMany("Nurses")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Nurse_User");

                    b.Navigation("Clinic");

                    b.Navigation("Employee");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HK_Clinic2.Models.Patient", b =>
                {
                    b.HasOne("HK_Clinic2.Models.Address", "Address")
                        .WithMany("Patients")
                        .HasForeignKey("AddressId")
                        .HasConstraintName("FK_Patient_Address")
                        .IsRequired();

                    b.HasOne("HK_Clinic2.Models.Employee", "Employee")
                        .WithMany("Patients")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_Patient_Employee");

                    b.HasOne("HK_Clinic2.Models.Student", "Student")
                        .WithMany("Patients")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_Patient_Student");

                    b.Navigation("Address");

                    b.Navigation("Employee");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("HK_Clinic2.Models.Patient_Allergy", b =>
                {
                    b.HasOne("HK_Clinic2.Models.Allergy", "Allergy")
                        .WithMany("Patient_Allergies")
                        .HasForeignKey("AllergyId")
                        .HasConstraintName("FK_Patient_Allergy_Allergy")
                        .IsRequired();

                    b.HasOne("HK_Clinic2.Models.Patient", "Patient")
                        .WithMany("Patient_Allergies")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_Patient_Allergy_Patient")
                        .IsRequired();

                    b.Navigation("Allergy");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HK_Clinic2.Models.Prescription", b =>
                {
                    b.HasOne("HK_Clinic2.Models.Inventory", "Inventory")
                        .WithMany("Prescriptions")
                        .HasForeignKey("InventoryId")
                        .HasConstraintName("FK_Prescription_Inventory")
                        .IsRequired();

                    b.HasOne("HK_Clinic2.Models.Patient", "Patient")
                        .WithMany("Prescriptions")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_Prescription_Patient")
                        .IsRequired();

                    b.HasOne("HK_Clinic2.Models.Treatment", "Treatment")
                        .WithMany("Prescriptions")
                        .HasForeignKey("TreatmentId")
                        .HasConstraintName("FK_Prescription_Treatment")
                        .IsRequired();

                    b.Navigation("Inventory");

                    b.Navigation("Patient");

                    b.Navigation("Treatment");
                });

            modelBuilder.Entity("HK_Clinic2.Models.Sick_Leave", b =>
                {
                    b.HasOne("HK_Clinic2.Models.Visit", "Visit")
                        .WithMany("Sick_Leaves")
                        .HasForeignKey("VisitId")
                        .HasConstraintName("FK_Sick_Leave_Visit")
                        .IsRequired();

                    b.Navigation("Visit");
                });

            modelBuilder.Entity("HK_Clinic2.Models.Staff", b =>
                {
                    b.HasOne("HK_Clinic2.Models.Employee", "Employee")
                        .WithOne("Staff")
                        .HasForeignKey("HK_Clinic2.Models.Staff", "EmployeeId")
                        .HasConstraintName("FK_Staff_Employee")
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("HK_Clinic2.Models.Student", b =>
                {
                    b.HasOne("HK_Clinic2.Models.Class", "Class")
                        .WithMany("Students")
                        .HasForeignKey("ClassId")
                        .HasConstraintName("FK__Student__ClassId__489AC854");

                    b.Navigation("Class");
                });

            modelBuilder.Entity("HK_Clinic2.Models.Student_Parent", b =>
                {
                    b.HasOne("HK_Clinic2.Models.Address", "Address")
                        .WithMany("Student_Parents")
                        .HasForeignKey("AddressId")
                        .HasConstraintName("FK_Student_Parent_Address");

                    b.HasOne("HK_Clinic2.Models.Parent", "Parent")
                        .WithMany("Student_Parents")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_Student_Parent_Parent")
                        .IsRequired();

                    b.HasOne("HK_Clinic2.Models.Student", "Student")
                        .WithMany("Student_Parents")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_Student_Parent_Student")
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Parent");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("HK_Clinic2.Models.Teacher", b =>
                {
                    b.HasOne("HK_Clinic2.Models.Employee", "Employee")
                        .WithOne("Teacher")
                        .HasForeignKey("HK_Clinic2.Models.Teacher", "EmployeeId")
                        .HasConstraintName("FK_Teacher_Employee")
                        .IsRequired();

                    b.HasOne("HK_Clinic2.Models.User", "User")
                        .WithMany("Teachers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Teacher_User");

                    b.Navigation("Employee");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HK_Clinic2.Models.Visit", b =>
                {
                    b.HasOne("HK_Clinic2.Models.Appointment", "Appointment")
                        .WithMany("Visits")
                        .HasForeignKey("AppointmentId")
                        .HasConstraintName("FK_Visit_Appointment")
                        .IsRequired();

                    b.HasOne("HK_Clinic2.Models.Inventory", "Inventory")
                        .WithMany("Visits")
                        .HasForeignKey("InventoryId")
                        .HasConstraintName("FK_Visit_Inventory");

                    b.HasOne("HK_Clinic2.Models.Notification", "Notification")
                        .WithMany("Visits")
                        .HasForeignKey("NotificationId")
                        .HasConstraintName("FK_Visit_Notification");

                    b.HasOne("HK_Clinic2.Models.Patient", "Patient")
                        .WithMany("Visits")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_Visit_Patient")
                        .IsRequired();

                    b.HasOne("HK_Clinic2.Models.Treatment", "Treatment")
                        .WithMany("Visits")
                        .HasForeignKey("TreatmentId")
                        .HasConstraintName("FK_Visit_Treatment")
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Inventory");

                    b.Navigation("Notification");

                    b.Navigation("Patient");

                    b.Navigation("Treatment");
                });

            modelBuilder.Entity("HK_Clinic2.Models.Vital", b =>
                {
                    b.HasOne("HK_Clinic2.Models.Visit", "Visit")
                        .WithMany("Vitals")
                        .HasForeignKey("VisitId")
                        .HasConstraintName("FK_Vitals_Visit")
                        .IsRequired();

                    b.Navigation("Visit");
                });

            modelBuilder.Entity("HK_Clinic2.Models.Address", b =>
                {
                    b.Navigation("Patients");

                    b.Navigation("Student_Parents");
                });

            modelBuilder.Entity("HK_Clinic2.Models.Allergy", b =>
                {
                    b.Navigation("Patient_Allergies");
                });

            modelBuilder.Entity("HK_Clinic2.Models.Appointment", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("Visits");
                });

            modelBuilder.Entity("HK_Clinic2.Models.Class", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("HK_Clinic2.Models.Clinic", b =>
                {
                    b.Navigation("Nurses");
                });

            modelBuilder.Entity("HK_Clinic2.Models.Employee", b =>
                {
                    b.Navigation("Nurse");

                    b.Navigation("Patients");

                    b.Navigation("Staff");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("HK_Clinic2.Models.Event", b =>
                {
                    b.Navigation("Event_Nurses");
                });

            modelBuilder.Entity("HK_Clinic2.Models.Inventory", b =>
                {
                    b.Navigation("Equipment");

                    b.Navigation("Medicine");

                    b.Navigation("Notifications");

                    b.Navigation("Prescriptions");

                    b.Navigation("Visits");
                });

            modelBuilder.Entity("HK_Clinic2.Models.Medical_Incident", b =>
                {
                    b.Navigation("Medical_Incident_Patients");
                });

            modelBuilder.Entity("HK_Clinic2.Models.Notification", b =>
                {
                    b.Navigation("Notification_Nurses");

                    b.Navigation("Notification_Parents");

                    b.Navigation("Visits");
                });

            modelBuilder.Entity("HK_Clinic2.Models.Nurse", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Event_Nurses");

                    b.Navigation("Notification_Nurses");
                });

            modelBuilder.Entity("HK_Clinic2.Models.Parent", b =>
                {
                    b.Navigation("Notification_Parents");

                    b.Navigation("Student_Parents");
                });

            modelBuilder.Entity("HK_Clinic2.Models.Patient", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("External_Medical_Reports");

                    b.Navigation("Medical_Incident_Patients");

                    b.Navigation("Patient_Allergies");

                    b.Navigation("Prescriptions");

                    b.Navigation("Visits");
                });

            modelBuilder.Entity("HK_Clinic2.Models.Student", b =>
                {
                    b.Navigation("FamilyDoctors");

                    b.Navigation("Patients");

                    b.Navigation("Student_Parents");
                });

            modelBuilder.Entity("HK_Clinic2.Models.Teacher", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("HK_Clinic2.Models.Treatment", b =>
                {
                    b.Navigation("Prescriptions");

                    b.Navigation("Visits");
                });

            modelBuilder.Entity("HK_Clinic2.Models.User", b =>
                {
                    b.Navigation("Nurses");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("HK_Clinic2.Models.Visit", b =>
                {
                    b.Navigation("Sick_Leaves");

                    b.Navigation("Vitals");
                });
#pragma warning restore 612, 618
        }
    }
}
